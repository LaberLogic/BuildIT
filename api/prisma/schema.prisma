// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String           @id @default(cuid())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  email       String           @unique
  firstName   String
  lastName    String
  password    String?
  role        ROLE             @default(WORKER)
  companyId   String?
  company     Company?         @relation(fields: [companyId], references: [id])
  assignments SiteAssignment[]
}

model Company {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  address   Address  @relation(fields: [addressId], references: [id])
  users     User[]
  sites     Site[]
  addressId String
}

model Address {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  company       Company[]
  site          Site[]
  streetNumber  String
  street        String
  city          String
  country       String
  postalCode    String
  googlePlaceId String?
}

model Site {
  id          String           @id @default(cuid())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  name        String
  address     Address          @relation(fields: [addressId], references: [id])
  companyId   String
  company     Company          @relation(fields: [companyId], references: [id])
  assignments SiteAssignment[]
  addressId   String
  material    Material[]
  startDate   DateTime?
  endDate     DateTime?
  notes       String?
  status      SITE_STATUS   @default(ACTIVE)
}

model Material {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  unit      String
  amount    Int
  threshold Int
  siteId   String
  site     Site          @relation(fields: [siteId], references: [id])
}

model SiteAssignment {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  site   Site   @relation(fields: [siteId], references: [id])
  siteId String

  @@unique([userId, siteId])
}

enum ROLE {
  ADMIN
  MANAGER
  WORKER
}

enum SITE_STATUS {
  ACTIVE
  INACTIVE
}
